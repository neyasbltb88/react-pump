{"version":3,"sources":["services/rand.js","services/random-name.js","services/worker-handler.js","services/throttle.js","services/position-watcher.js","components/btn/index.js","components/btn/btn.js","pages/main/index.js","pages/main/main.js","pages/pumping/index.js","pages/pumping/pumping.js","pages/pumped/index.js","pages/pumped/pumped.js","components/app/index.js","components/app/app.js","index.js"],"names":["rand","min","max","Math","floor","random","randomName","length","name","i","String","fromCharCode","workerHandler","worker","handlers","message","type","data","port","postMessage","JSON","stringify","handler","e","parse","console","log","typeHandler","err","this","addEventListener","start","makeTrottle","func","ms","savedArgs","savedThis","isThrottled","wrapper","arguments","apply","setTimeout","throttle","positionWatcher","callback","position","top","window","screenY","right","screenX","outerWidth","bottom","outerHeight","left","comparePosition","cb","lastPosition","autoUpdate","raf","requestAnimationFrame","diff","pos","cancelAnimationFrame","Btn","props","onClick","label","disabled","className","Main","SharedWorker","messageHandler","onChangePumpingConnected","state","opened","open","setState","main_state","value","Component","Pumping","onPositionUpdate","onDisconnectedPumped","posWatcher","lastTitle","Pumpeds","Map","Plugged","Set","openPumped","onClose","closeAllPumpeds","has","add","delete","target","set","forEach","pumped","vertical","horizontal","onPlug","onUnplug","collisionCalc","pumping_state","document","title","onPosition","stop","posiSpans","Object","keys","map","key","plugged","plug","pluggedCnt","size","Pumped","close","onChangePlug","plagged","pluggedMark","App","basename","process","path","component","exact","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.76bb0b0a.chunk.js","sourcesContent":["const rand = (min, max) => {\r\n    let rand = Math.floor(min + Math.random() * (max + 1 - min));\r\n    return rand;\r\n}\r\n\r\nexport default rand;","import rand from './rand'\r\n\r\nconst randomName = (length = 10) => {\r\n    let name = '';\r\n    for (let i = 0; i < length; i++) {\r\n        name += String.fromCharCode(rand(97, 122));\r\n    }\r\n\r\n    return name;\r\n}\r\n\r\nexport default randomName;","export default class workerHandler {\r\n    constructor(worker, handlers) {\r\n        this.worker = worker;\r\n        this.handlers = handlers;\r\n\r\n        this.worker.port.addEventListener('message', this.handler, false);\r\n        this.worker.port.start();\r\n    }\r\n\r\n    message = (type, data) => {\r\n        this.worker.port.postMessage(JSON.stringify({ type, data }));\r\n    }\r\n\r\n    handler = (e) => {\r\n        try {\r\n            let { type, data } = JSON.parse(e.data);\r\n            if(type !== 'position:update') {\r\n                console.log(type, data);\r\n            }\r\n            \r\n\r\n            let typeHandler = this.handlers[type];\r\n            if(typeHandler) typeHandler(data);\r\n\r\n        } catch(err) { console.log(err) }\r\n    }\r\n}","function throttle(func, ms) {\r\n    let isThrottled = false,\r\n        savedArgs,\r\n        savedThis;\r\n\r\n    function wrapper() {\r\n        if (isThrottled) {\r\n            savedArgs = arguments;\r\n            savedThis = this;\r\n            return;\r\n        }\r\n\r\n        func.apply(this, arguments);\r\n        isThrottled = true;\r\n\r\n        setTimeout(function() {\r\n            isThrottled = false;\r\n            if (savedArgs) {\r\n                wrapper.apply(savedThis, savedArgs);\r\n                savedArgs = savedThis = null;\r\n            }\r\n        }, ms);\r\n    }\r\n\r\n    return wrapper;\r\n}\r\n\r\nconst makeTrottle = (func, ms) => throttle(func, ms);\r\n\r\nexport default makeTrottle;","import throttle from './throttle';\r\n\r\nexport default class positionWatcher {\r\n    constructor(callback = () => {}) {\r\n        this.cb = callback;\r\n        this.handler = throttle(this.handler, 50);\r\n        this.lastPosition = {\r\n            top: null,\r\n            right: null,\r\n            bottom: null,\r\n            left: null\r\n        };\r\n\r\n        this.raf = null;\r\n        this.autoUpdate = false;\r\n\r\n        // window.addEventListener('resize', this.handler);\r\n        // requestAnimationFrame(() => this.handler());\r\n        // window.requestAnimationFrame(this.handler);\r\n\r\n        this.start();\r\n    }\r\n\r\n    comparePosition(position) {\r\n        let diff = false;\r\n\r\n        for(let pos in position) {\r\n            if(position[pos] !== this.lastPosition[pos]) {\r\n                diff = true;\r\n            }\r\n        }\r\n\r\n        return diff;\r\n    }\r\n\r\n    handler = () => {\r\n        let position = {\r\n            top: window.screenY,\r\n            right: window.screenX + window.outerWidth,\r\n            bottom: window.screenY + window.outerHeight,\r\n            left: window.screenX\r\n        };\r\n\r\n        let compare = this.comparePosition(position);\r\n        if(compare) {\r\n            this.cb(position);\r\n            this.lastPosition = position;\r\n        }\r\n\r\n        if(this.autoUpdate) {\r\n            this.raf = window.requestAnimationFrame(() => this.handler());\r\n        }\r\n    }\r\n\r\n    start() {\r\n        this.autoUpdate = true;\r\n        this.handler();\r\n    }\r\n\r\n    stop() {\r\n        this.autoUpdate = false;\r\n        window.cancelAnimationFrame(this.raf);\r\n    }\r\n}","import Btn from './btn';\r\n\r\nexport default Btn;","import React from 'react';\r\nimport './btn.css';\r\n\r\nconst Btn = (props) => {\r\n    const { onClick, label, disabled } = props;\r\n\r\n    return <button className=\"Btn\" onClick={onClick} disabled={disabled} >{label}</button>\r\n}\r\n\r\nexport default Btn;","import Main from './main';\r\n\r\nexport default Main;","import React, { Component } from 'react';\r\nimport { randomName, workerHandler } from '../../services'\r\nimport './main.css';\r\n\r\nimport Btn from '../../components/btn';\r\n\r\nexport default class Main extends Component {\r\n\r\n    worker = new SharedWorker('./services/worker.js');\r\n\r\n    messageHandler = new workerHandler(this.worker, {\r\n        'pumping:connected': () => {\r\n            this.onChangePumpingConnected(true);\r\n        },\r\n        'pumping:disconnected': () => {\r\n            this.onChangePumpingConnected(false);\r\n        },\r\n        'status:pumping': (data) => {\r\n            this.onChangePumpingConnected(data);\r\n        }\r\n    });\r\n\r\n    state = {\r\n        opened: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        window.main_state = this.state;\r\n        window.messageHandler = this.messageHandler;\r\n\r\n        this.messageHandler.message('checkStatus:pumping');\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        window.main_state = this.state;\r\n    }\r\n\r\n    onChangePumpingConnected(value) {\r\n        this.setState({\r\n            opened: value\r\n        });\r\n    }\r\n\r\n    onClick = () => {\r\n        const { REACT_APP_DEPLOY_FOLDER } = process.env;\r\n        const DEPLOY_FOLDER = REACT_APP_DEPLOY_FOLDER ? '/' + REACT_APP_DEPLOY_FOLDER : '';\r\n        window.open(`${DEPLOY_FOLDER}/pumping`, randomName(), 'resizable');\r\n\r\n        this.setState({\r\n            opened: true\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const { opened } = this.state;\r\n        return (\r\n            <div className=\"Main\">\r\n                <Btn onClick={this.onClick} label=\"Запустить насос\" disabled={opened}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import Pumping from './pumping';\r\n\r\nexport default Pumping;","import React, { Component } from 'react';\r\nimport { randomName, workerHandler, positionWatcher } from '../../services'\r\n\r\nimport Btn from '../../components/btn'\r\n\r\nimport './pumping.css';\r\n\r\nexport default class Pumping extends Component {\r\n\r\n    worker = new SharedWorker('./services/worker.js');\r\n\r\n    messageHandler = new workerHandler(this.worker, {\r\n        'position:update': (data) => this.onPositionUpdate(data),\r\n        'pumped:disconnected': (data) => this.onDisconnectedPumped(data),\r\n    });\r\n\r\n    posWatcher = null;\r\n\r\n    state = {\r\n        lastTitle: '',\r\n        Pumping: {}, // Положение насоса\r\n        Pumpeds: new Map(), // Список шариков с их положениями\r\n        Plugged: new Set(), // Коллекция подключенных шариков\r\n    }\r\n\r\n    // Подключает шарик к насосу\r\n    onPlug(name) {\r\n        this.setState(state => {\r\n            let Plugged = new Set([...state.Plugged]);\r\n\r\n            // Если шарик еще не был подключен, подключаем и ведомляем\r\n            if(!Plugged.has(name)) {\r\n                Plugged.add(name);\r\n                this.messageHandler.message('pumped:plugged', name);\r\n            } \r\n            \r\n            return { Plugged };\r\n        });\r\n    }\r\n\r\n    // Отключает шарик от насоса\r\n    onUnplug(name) {\r\n        this.setState(state => {\r\n            let Plugged = new Set([...state.Plugged]);\r\n\r\n            // Если delete вернет true, значит шарик был подключен, \r\n            // а теперь отключился, значит уведомляем\r\n            if(Plugged.delete(name)) {\r\n                this.messageHandler.message('pumped:unplugged', name);\r\n            } \r\n            \r\n            return { Plugged };\r\n        });\r\n    }\r\n\r\n    // Рассчитывает столкновения(подключения) насоса и шариков\r\n    collisionCalc(target, position) {\r\n        let Pumping = null;\r\n        let Pumpeds = new Map([...this.state.Pumpeds]);\r\n\r\n        // Если изменилось положение насоса\r\n        if(target === 'Pumping') {\r\n            // Запомним новое положение насоса\r\n            Pumping = position;\r\n\r\n        // Если изменилось положение шарика\r\n        } else {\r\n            // Получим положение насоса\r\n            Pumping = {...this.state.Pumping};\r\n            // Обновим изменившееся положение шарика\r\n            Pumpeds.set(target, position);\r\n        }\r\n\r\n        // Сверяем положение насоса с шариками\r\n        Pumpeds.forEach((pumped, name) => {\r\n            let vertical = false;\r\n            let horizontal = false;\r\n\r\n            if(Pumping.top <= pumped.bottom && Pumping.bottom >= pumped.top) { vertical = true; }\r\n            if(Pumping.left <= pumped.right && Pumping.right >= pumped.left) { horizontal = true; }\r\n\r\n            if(vertical && horizontal) {\r\n                this.onPlug(name);\r\n            } else {\r\n                this.onUnplug(name);\r\n            }\r\n        });\r\n\r\n        // Сохраним изменения положений\r\n        this.setState({\r\n            Pumping,\r\n            Pumpeds\r\n        });\r\n    }\r\n\r\n    // Обрабатывает дисконнект шарика\r\n    onDisconnectedPumped(data) {\r\n        let Pumpeds = new Map([...this.state.Pumpeds]);\r\n        Pumpeds.delete(data);\r\n        this.onUnplug(data);\r\n\r\n        this.setState({\r\n            Pumpeds\r\n        });\r\n    }\r\n\r\n    // Обрабатывает изменение размеров/позиций насоса и шариков\r\n    onPositionUpdate(data) {\r\n        let { target, position } = data;\r\n        this.collisionCalc(target, position);\r\n    }\r\n\r\n    // Открывает новый шарик\r\n    openPumped = () => {\r\n        const { REACT_APP_DEPLOY_FOLDER } = process.env;\r\n        const DEPLOY_FOLDER = REACT_APP_DEPLOY_FOLDER ? '/' + REACT_APP_DEPLOY_FOLDER : '';\r\n\r\n        setTimeout(() => {\r\n            let name = randomName();\r\n            window.open(`${DEPLOY_FOLDER}/pumped`, name, 'resizable');\r\n        }, 100);\r\n    }\r\n\r\n    // Обрабатывает изменение положения насоса\r\n    onPosition(position) {\r\n        this.messageHandler.message('position:update', {target: 'Pumping', position});\r\n\r\n        this.setState({\r\n            Pumping: position\r\n        });\r\n    }\r\n\r\n    // Обрабатывает закрытие окна насоса\r\n    onClose = () => {\r\n        this.closeAllPumpeds();\r\n\r\n        this.messageHandler.message('pumping:disconnected');\r\n    }\r\n\r\n    // Отправляет команду закрытия всех шариков\r\n    closeAllPumpeds = () => {\r\n        this.messageHandler.message('pumped:closeAll');\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.pumping_state = this.state;\r\n\r\n        let lastTitle = document.title;\r\n        document.title = 'Насос';\r\n\r\n        this.setState({\r\n            lastTitle\r\n        });\r\n\r\n        // this.openPumped();\r\n\r\n        window.addEventListener('beforeunload', this.onClose);\r\n        this.messageHandler.message('pumping:connected');\r\n\r\n        this.posWatcher = new positionWatcher(pos => this.onPosition(pos));\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        window.pumping_state = this.state;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.title = this.state.lastTitle;\r\n\r\n        this.posWatcher && this.posWatcher.stop();\r\n    }\r\n    \r\n    render() {\r\n        const { Pumping, Plugged } = this.state;\r\n        let posiSpans = Object.keys(Pumping).map(pos => <div key={pos}>{ pos }: { Pumping[pos] }</div>);\r\n        let plugged = [...Plugged].map(plug => <div key={plug}>{ plug }</div>);\r\n        let pluggedCnt = Plugged.size ? <span className=\"text-primary\">({ Plugged.size })</span> : null;\r\n\r\n        return (\r\n            <div className=\"Pumping\">\r\n                <div>Pumping</div>\r\n                <hr/>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col\">{posiSpans}</div>\r\n                    <div className=\"col\">\r\n                        Plugged { pluggedCnt }\r\n                        <hr/>\r\n                        { plugged }\r\n                    </div>\r\n                </div>\r\n\r\n                <br />\r\n                <Btn onClick={this.closeAllPumpeds} label=\"Закрыть шарики\"></Btn>\r\n                <br />\r\n                <br />\r\n                <Btn onClick={this.openPumped} label=\"Открыть шарик\"></Btn>\r\n            </div>\r\n        )\r\n    }\r\n}","import Pumped from './pumped';\r\n\r\nexport default Pumped;","import React, { Component } from 'react';\r\nimport { workerHandler, positionWatcher } from '../../services'\r\n\r\nimport './pumped.css';\r\n\r\nexport default class Pumped extends Component{\r\n\r\n    worker = new SharedWorker('./services/worker.js');\r\n\r\n    messageHandler = new workerHandler(this.worker, {\r\n        'pumped:close': (data) => {\r\n            if(window.name === data) window.close();\r\n        },\r\n        'pumped:closeAll': () => {\r\n            window.close();\r\n        },\r\n        'pumped:plugged': (data) => {\r\n            if(window.name === data) this.onChangePlug(true);\r\n        },\r\n        'pumped:unplugged': (data) => {\r\n            if(window.name === data) this.onChangePlug(false);\r\n        }\r\n    });\r\n\r\n    state = {\r\n        lastTitle: '',\r\n        position: {},\r\n        plagged: false,\r\n    }\r\n\r\n    onChangePlug(value) {\r\n        this.setState({\r\n            plagged: value\r\n        });\r\n    }\r\n\r\n    onPosition(position) {\r\n        this.messageHandler.message('position:update', {target: window.name, position});\r\n        this.setState({\r\n            position\r\n        })\r\n    }\r\n\r\n    onClose = () => {\r\n        this.messageHandler.message('pumped:disconnected', window.name);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let lastTitle = document.title;\r\n        document.title = 'Шарик';\r\n\r\n        window.addEventListener('beforeunload', this.onClose);\r\n\r\n        this.messageHandler.message('pumped:connected', window.name);\r\n\r\n        this.posWatcher = new positionWatcher(pos => this.onPosition(pos));\r\n\r\n        this.setState({\r\n            lastTitle\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.title = this.state.lastTitle;\r\n\r\n        this.posWatcher && this.posWatcher.stop();\r\n    }\r\n\r\n    render() {\r\n        const { position, plagged } = this.state;\r\n        let posiSpans = Object.keys(position).map(pos => <div key={pos}>{ pos }: { position[pos] }</div>);\r\n        let pluggedMark = plagged ? <span className=\"text-primary\">(Plugged)</span> : null;\r\n\r\n        return (\r\n            <div className=\"Pumped\">\r\n                <div>Pumped: {window.name} { pluggedMark }</div>\r\n                <hr/>\r\n                {posiSpans}\r\n            </div>\r\n        )\r\n    }\r\n}","import App from './app'\r\n\r\nexport default App","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Main from '../../pages/main';\nimport Pumping from '../../pages/pumping';\nimport Pumped from '../../pages/pumped';\n\nimport './app.css';\n\nconst App = () => {\n    const { REACT_APP_DEPLOY_FOLDER } = process.env;\n    \n    return (\n        <div className=\"App\" >\n            <Router basename={REACT_APP_DEPLOY_FOLDER}>\n                <Route path={`/`} component={ Main } exact/>\n\n                <Route path={`/pumping`} component={ Pumping }/>\n\n                <Route path={`/pumped`} component={ Pumped }/>\n            </Router>\n        </div>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\n\nReactDOM.render( <App / > , document.getElementById('root'));"],"sourceRoot":""}