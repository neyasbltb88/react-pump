{"version":3,"sources":["services/rand.js","services/random-name.js","services/worker-handler.js","services/throttle.js","services/position-watcher.js","components/btn/index.js","components/btn/btn.js","pages/main/index.js","pages/main/main.js","pages/pumping/index.js","pages/pumping/pumping.js","pages/pumped/index.js","pages/pumped/pumped.js","components/app/index.js","components/app/app.js","index.js"],"names":["rand","min","max","Math","floor","random","randomName","length","name","i","String","fromCharCode","workerHandler","worker","handlers","message","type","data","port","postMessage","JSON","stringify","handler","e","parse","console","log","typeHandler","err","this","addEventListener","start","makeTrottle","func","ms","savedArgs","savedThis","isThrottled","wrapper","arguments","apply","setTimeout","throttle","positionWatcher","callback","position","top","window","screenY","right","screenX","outerWidth","bottom","outerHeight","left","comparePosition","cb","lastPosition","autoUpdate","raf","requestAnimationFrame","diff","pos","cancelAnimationFrame","Btn","props","btn","React","createRef","color","current","style","setProperty","onClick","label","disabled","dense","children","content","title","ref","className","Component","Main","SharedWorker","messageHandler","onChangePumpingConnected","state","opened","pumpingLeft","screen","availWidth","width","pumpingWidth","pumpingTop","availHeight","height","pumpingHeight","pumpingParams","open","setState","main_state","value","Pumping","onPositionUpdate","onDisconnectedPumped","focus","autoOpenPumpeds","lastTitle","pumpedSize","autoOpen","lastPumpHeight","connectedSide","pumpRatio","Pumpeds","Map","Plugged","onClose","closeAllPumpeds","openPumped","params","w","h","winParams","side","has","get","set","target","delete","sides","forEach","pumped","vertical","horizontal","onPlug","onUnplug","collisionCalc","openedCnt","pumpedParams","msg","delta","abs","ratio","onPump","pumping_state","document","posWatcher","onPosition","stop","connecters","Object","keys","map","key","src","alt","draggable","Pumped","close","onChangePlug","plagged","onPumpDown","runResize","need","smoothResize","resizeBy","moveBy","xmlns","viewBox","version","fill","transform","d","App","basename","process","path","component","exact","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c8e123fc.chunk.js","sourcesContent":["const rand = (min, max) => {\r\n    let rand = Math.floor(min + Math.random() * (max + 1 - min));\r\n    return rand;\r\n}\r\n\r\nexport default rand;","import rand from './rand'\r\n\r\nconst randomName = (length = 10) => {\r\n    let name = '';\r\n    for (let i = 0; i < length; i++) {\r\n        name += String.fromCharCode(rand(97, 122));\r\n    }\r\n\r\n    return name;\r\n}\r\n\r\nexport default randomName;","export default class workerHandler {\r\n    constructor(worker, handlers) {\r\n        this.worker = worker;\r\n        this.handlers = handlers;\r\n\r\n        this.worker.port.addEventListener('message', this.handler, false);\r\n        this.worker.port.start();\r\n    }\r\n\r\n    message = (type, data) => {\r\n        this.worker.port.postMessage(JSON.stringify({ type, data }));\r\n    }\r\n\r\n    handler = (e) => {\r\n        try {\r\n            let { type, data } = JSON.parse(e.data);\r\n            if(type !== 'position:update') {\r\n                console.log(type, data);\r\n            }\r\n            \r\n\r\n            let typeHandler = this.handlers[type];\r\n            if(typeHandler) typeHandler(data);\r\n\r\n        } catch(err) { console.log(err) }\r\n    }\r\n}","function throttle(func, ms) {\r\n    let isThrottled = false,\r\n        savedArgs,\r\n        savedThis;\r\n\r\n    function wrapper() {\r\n        if (isThrottled) {\r\n            savedArgs = arguments;\r\n            savedThis = this;\r\n            return;\r\n        }\r\n\r\n        func.apply(this, arguments);\r\n        isThrottled = true;\r\n\r\n        setTimeout(function() {\r\n            isThrottled = false;\r\n            if (savedArgs) {\r\n                wrapper.apply(savedThis, savedArgs);\r\n                savedArgs = savedThis = null;\r\n            }\r\n        }, ms);\r\n    }\r\n\r\n    return wrapper;\r\n}\r\n\r\nconst makeTrottle = (func, ms) => throttle(func, ms);\r\n\r\nexport default makeTrottle;","import throttle from './throttle';\r\n\r\nexport default class positionWatcher {\r\n    constructor(callback = () => {}) {\r\n        this.cb = callback;\r\n        this.handler = throttle(this.handler, 50);\r\n        this.lastPosition = {\r\n            top: null,\r\n            right: null,\r\n            bottom: null,\r\n            left: null\r\n        };\r\n\r\n        this.raf = null;\r\n        this.autoUpdate = false;\r\n\r\n        this.start();\r\n    }\r\n\r\n    comparePosition(position) {\r\n        let diff = false;\r\n\r\n        for(let pos in position) {\r\n            if(position[pos] !== this.lastPosition[pos]) {\r\n                diff = true;\r\n            }\r\n        }\r\n\r\n        return diff;\r\n    }\r\n\r\n    handler = () => {\r\n        let position = {\r\n            top: window.screenY,\r\n            right: window.screenX + window.outerWidth,\r\n            bottom: window.screenY + window.outerHeight,\r\n            left: window.screenX\r\n        };\r\n\r\n        let compare = this.comparePosition(position);\r\n        if(compare) {\r\n            this.cb(position);\r\n            this.lastPosition = position;\r\n        }\r\n\r\n        if(this.autoUpdate) {\r\n            this.raf = window.requestAnimationFrame(() => this.handler());\r\n        }\r\n    }\r\n\r\n    start() {\r\n        this.autoUpdate = true;\r\n        this.handler();\r\n    }\r\n\r\n    stop() {\r\n        this.autoUpdate = false;\r\n        window.cancelAnimationFrame(this.raf);\r\n    }\r\n}","import Btn from './btn';\r\n\r\nexport default Btn;","import React, { Component, createRef } from 'react';\r\nimport './btn.css';\r\n\r\nexport default class Btn extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.btn = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.color) {\r\n            this.btn.current.style.setProperty('--primary', this.props.color);\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const { onClick, label, disabled, dense, children } = this.props;\r\n        let content = children ? children : label;\r\n        let title = (children && label) ? label : '';\r\n\r\n        return <button ref={this.btn} className={`${dense ? 'Btn-dense' : 'Btn'}`} onClick={onClick} disabled={disabled} title={title}>{content}</button>\r\n    }\r\n    \r\n}","import Main from './main';\r\n\r\nexport default Main;","import React, { Component } from 'react';\r\nimport { randomName, workerHandler } from '../../services'\r\nimport './main.css';\r\n\r\nimport Btn from '../../components/btn';\r\n\r\nexport default class Main extends Component {\r\n\r\n    worker = new SharedWorker('./services/worker.js');\r\n\r\n    messageHandler = new workerHandler(this.worker, {\r\n        'pumping:connected': () => {\r\n            this.onChangePumpingConnected(true);\r\n        },\r\n        'pumping:disconnected': () => {\r\n            this.onChangePumpingConnected(false);\r\n        },\r\n        'status:pumping': (data) => {\r\n            this.onChangePumpingConnected(data);\r\n        }\r\n    });\r\n\r\n    state = {\r\n        opened: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        window.main_state = this.state;\r\n        window.messageHandler = this.messageHandler;\r\n\r\n        this.messageHandler.message('checkStatus:pumping');\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        window.main_state = this.state;\r\n    }\r\n\r\n    onChangePumpingConnected(value) {\r\n        this.setState({\r\n            opened: value\r\n        });\r\n    }\r\n\r\n    onClick = () => {\r\n        const { REACT_APP_DEPLOY_FOLDER } = process.env;\r\n        const DEPLOY_FOLDER = REACT_APP_DEPLOY_FOLDER ? '/' + REACT_APP_DEPLOY_FOLDER : '';\r\n\r\n        let pumpingWidth = 300;\r\n        let pumpingHeight = 550;\r\n        let screenWidth = window.screen.availWidth || window.screen.width;\r\n        let screenHeight = window.screen.availHeight || window.screen.height;\r\n\r\n        let pumpingLeft = (screenWidth / 2 ) - (pumpingWidth / 2);\r\n        let pumpingTop = (screenHeight / 2 ) - (pumpingHeight / 2);\r\n\r\n        let pumpingParams = `resizable,width=${pumpingWidth},height=${pumpingHeight},left=${pumpingLeft},top=${pumpingTop},location=no,status=no,scrollbars=no,toolbar=no,menubar=no`;\r\n\r\n        window.open(`${DEPLOY_FOLDER}/pumping`, randomName(), pumpingParams);\r\n\r\n        this.setState({\r\n            opened: true\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const { opened } = this.state;\r\n        let label = opened ? 'Насос запущен' : 'Запустить насос';\r\n\r\n        return (\r\n            <div className=\"Main\">\r\n                <Btn onClick={this.onClick} label={ label } disabled={ opened } />\r\n            </div>\r\n        )\r\n    }\r\n}","import Pumping from './pumping';\r\n\r\nexport default Pumping;","import React, { Component } from 'react';\r\nimport { rand, randomName, workerHandler, positionWatcher } from '../../services'\r\n\r\nimport Btn from '../../components/btn'\r\n\r\nimport './pumping.css';\r\n\r\nexport default class Pumping extends Component {\r\n\r\n    worker = new SharedWorker('./services/worker.js');\r\n\r\n    messageHandler = new workerHandler(this.worker, {\r\n        'position:update': (data) => this.onPositionUpdate(data),\r\n        'pumped:disconnected': (data) => this.onDisconnectedPumped(data),\r\n        'pumped:connected': () => {\r\n            window.focus();\r\n            this.messageHandler.message('checkStatus:pumpeds');\r\n        },\r\n        'status:pumpeds': (data) => this.autoOpenPumpeds(data),\r\n    });\r\n\r\n    state = {\r\n        lastTitle: '',\r\n        pumpedSize: 300,\r\n        autoOpen: true,\r\n        lastPumpHeight: null,\r\n        connectedSide: {\r\n            left: false,\r\n            right: false\r\n        },\r\n        pumpRatio: 10,\r\n        Pumping: {}, // Положение насоса\r\n        Pumpeds: new Map(), // Список шариков с их положениями\r\n        Plugged: new Map(), // Коллекция подключенных шариков\r\n    }\r\n\r\n    // Подключает шарик к насосу\r\n    onPlug(name, side) {\r\n        side = ( side === 'left' ) ? 'right' : 'left';\r\n\r\n        this.setState(state => {\r\n            let Plugged = new Map([...state.Plugged]);\r\n\r\n            // Если шарик еще не был подключен, подключаем и ведомляем\r\n            if(!Plugged.has(name) || Plugged.get(name) !== side) {\r\n                Plugged.set(name, side);\r\n                this.messageHandler.message('pumped:plugged', {\r\n                    target: name,\r\n                    side\r\n                });\r\n            } \r\n            \r\n            return { Plugged };\r\n        });\r\n    }\r\n\r\n    // Отключает шарик от насоса\r\n    onUnplug(name) {\r\n        this.setState(state => {\r\n            let Plugged = new Map([...state.Plugged]);\r\n\r\n            // Если delete вернет true, значит шарик был подключен, \r\n            // а теперь отключился, значит уведомляем\r\n            if(Plugged.delete(name)) {\r\n                this.messageHandler.message('pumped:unplugged', name);\r\n            } \r\n            \r\n            return { Plugged };\r\n        });\r\n    }\r\n\r\n    // Рассчитывает столкновения(подключения) насоса и шариков\r\n    collisionCalc(target, position) {\r\n        let Pumping = null;\r\n        let Pumpeds = new Map([...this.state.Pumpeds]);\r\n        let sides = {\r\n            left: false,\r\n            right: false\r\n        }\r\n\r\n        // Если изменилось положение насоса\r\n        if(target === 'Pumping') {\r\n            // Запомним новое положение насоса\r\n            Pumping = position;\r\n\r\n        // Если изменилось положение шарика\r\n        } else {\r\n            // Получим положение насоса\r\n            Pumping = {...this.state.Pumping};\r\n            // Обновим изменившееся положение шарика\r\n            Pumpeds.set(target, position);\r\n        }\r\n\r\n        // Сверяем положение насоса с шариками\r\n        Pumpeds.forEach((pumped, name) => {\r\n            let vertical = false;\r\n            let horizontal = false;\r\n\r\n            if(Pumping.top <= pumped.bottom && Pumping.bottom >= pumped.top) { vertical = true; }\r\n            if(Pumping.left <= pumped.right && Pumping.right >= pumped.left) { horizontal = true; }\r\n\r\n            if(vertical && horizontal) {\r\n                let pumpingCenter = ((Pumping.right - Pumping.left) / 2) + Pumping.left;\r\n                let pumpedCenter = ((pumped.right - pumped.left) / 2) + pumped.left;\r\n\r\n                let side = ( (pumpingCenter - pumpedCenter) > 0 ) ? 'left' : 'right';\r\n                sides[side] = true;\r\n                this.onPlug(name, side);\r\n            } else {\r\n                this.onUnplug(name);\r\n            }\r\n        });\r\n\r\n        // Сохраним изменения положений\r\n        this.setState({\r\n            connectedSide: sides,\r\n            Pumping,\r\n            Pumpeds\r\n        });\r\n    }\r\n\r\n    // Обрабатывает дисконнект шарика\r\n    onDisconnectedPumped(data) {\r\n        let Pumpeds = new Map([...this.state.Pumpeds]);\r\n        let { Pumping } = this.state;\r\n\r\n        Pumpeds.delete(data);\r\n\r\n        this.setState({\r\n            Pumpeds\r\n        });\r\n\r\n        this.onUnplug(data);\r\n        this.collisionCalc('Pumping', Pumping);\r\n    }\r\n\r\n    // Обрабатывает изменение размеров/позиций насоса и шариков\r\n    onPositionUpdate(data) {\r\n        let { target, position } = data;\r\n        this.collisionCalc(target, position);\r\n    }\r\n\r\n    // Обрабатывает закрытие окна насоса\r\n    onClose = () => {\r\n        this.closeAllPumpeds();\r\n\r\n        this.messageHandler.message('pumping:disconnected');\r\n    }\r\n\r\n    // Отправляет команду закрытия всех шариков\r\n    closeAllPumpeds = () => {\r\n        this.messageHandler.message('pumped:closeAll');\r\n    }\r\n\r\n    // Открывает новый шарик\r\n    openPumped = (params) => {\r\n        const { REACT_APP_DEPLOY_FOLDER } = process.env;\r\n        const DEPLOY_FOLDER = REACT_APP_DEPLOY_FOLDER ? '/' + REACT_APP_DEPLOY_FOLDER : '';\r\n\r\n        let { pumpedSize } = this.state;\r\n        let screenWidth = window.screen.availWidth || window.screen.width;\r\n        let screenHeight = window.screen.availHeight || window.screen.height;\r\n\r\n        let w = screenWidth - pumpedSize;\r\n        let h = screenHeight - pumpedSize;\r\n\r\n        let winParams = params ? params : `resizable,width=${pumpedSize},height=${pumpedSize},left=${rand(0, w)},top=${rand(0, h)}`;\r\n\r\n        setTimeout(() => {\r\n            let name = randomName();\r\n            window.open(`${DEPLOY_FOLDER}/pumped`, name, winParams);\r\n        }, 0);\r\n    }\r\n\r\n    // Автоматически открывает 2 шарика слева и справа от насоса\r\n    autoOpenPumpeds(openedCnt) {\r\n        if(!this.state.autoOpen) return;\r\n\r\n        let { top, right, bottom, left } = this.state.Pumping;\r\n        let { pumpedSize } = this.state;\r\n\r\n        let pumpedParams = [\r\n            `resizable,width=${pumpedSize},height=${pumpedSize},left=${left - pumpedSize + 15},top=${top + (bottom / 2) - (pumpedSize / 2)}`,\r\n            `resizable,width=${pumpedSize},height=${pumpedSize},left=${right - 15},top=${top + (bottom / 2) - (pumpedSize / 2)}`\r\n        ];\r\n\r\n        if(pumpedParams[openedCnt]) {\r\n            this.openPumped(pumpedParams[openedCnt]);\r\n        } else {\r\n            this.setState({\r\n                autoOpen: false\r\n            });\r\n        }\r\n    }\r\n\r\n    // Обработчик накачивания\r\n    onPump(position) {\r\n        let { lastPumpHeight, pumpRatio } = this.state;\r\n        let height = position.bottom - position.top;\r\n\r\n        // Проверка на null для того, чтобы не сработало само после старта\r\n        if(lastPumpHeight !== null && lastPumpHeight !== height) {\r\n            let msg = (lastPumpHeight < height) ? 'pump:up' : 'pump:down';\r\n            let delta = Math.abs(lastPumpHeight - height);\r\n\r\n            // Оповещаем о накачивании, передаем величину накачки и коэффициент\r\n            this.messageHandler.message(msg, {\r\n                delta,\r\n                ratio: pumpRatio\r\n            });\r\n        }\r\n        \r\n        return height;\r\n    }\r\n\r\n    // Обрабатывает изменение положения насоса\r\n    onPosition(position) {\r\n        this.messageHandler.message('position:update', {target: 'Pumping', position});\r\n\r\n        let lastPumpHeight = this.onPump(position);\r\n\r\n        this.setState({\r\n            lastPumpHeight,\r\n            Pumping: position\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.pumping_state = this.state;\r\n\r\n        let lastTitle = document.title;\r\n        document.title = 'Насос';\r\n\r\n        this.setState({\r\n            lastTitle\r\n        });\r\n\r\n        window.addEventListener('beforeunload', this.onClose);\r\n        this.messageHandler.message('pumping:connected');\r\n\r\n        this.posWatcher = new positionWatcher(pos => this.onPosition(pos));\r\n\r\n        // Запрос количества открытых шариков\r\n        this.messageHandler.message('checkStatus:pumpeds');\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        window.pumping_state = this.state;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.title = this.state.lastTitle;\r\n        this.posWatcher && this.posWatcher.stop();\r\n    }\r\n    \r\n    render() {\r\n        let { connectedSide } = this.state;\r\n        let connecters = Object.keys(connectedSide).map(side => {\r\n            return connectedSide[side] ? \r\n                <img key={side} src={`../img/pump-tube-${side}.svg`} alt={`pump-tube-${side}`} className={`pump-tube pump-tube-${side}-svg`} draggable=\"false\"/> : null;\r\n        });\r\n\r\n        return (\r\n            <div className=\"Pumping\">\r\n                <div className=\"btn-section\">\r\n                    <Btn onClick={() => this.openPumped()} label=\"Добавить шарик\" dense>\r\n                        <img src=\"../img/balloon-plus.svg\" alt=\"balloon-plus\" className=\"balloon-plus-svg\" draggable=\"false\" height=\"20\"/>\r\n                    </Btn>\r\n                    <Btn onClick={() => this.closeAllPumpeds()} label=\"Убрать все шарики\" color=\"#e91e63\" dense>\r\n                        <img src=\"../img/balloon-close.svg\" alt=\"balloon-close\" className=\"balloon-close-svg\" draggable=\"false\" height=\"20\"/>\r\n                    </Btn>\r\n                </div>\r\n\r\n                <div className=\"pump\">\r\n                    <div className=\"pump-handle\">\r\n                        <img src=\"../img/pump-handle.svg\" alt=\"pump-handle\" className=\"pump-handle-svg\" draggable=\"false\"/>\r\n                    </div>\r\n                    <div className=\"pump-plunger\">\r\n                        <img src=\"../img/pump-plunger.svg\" alt=\"pump-plunger\" className=\"pump-plunger-svg\" draggable=\"false\"/>\r\n                    </div>\r\n                    <div className=\"pump-body\">\r\n                        <img src=\"../img/pump-body.svg\" alt=\"pump-body\" className=\"pump-body-svg\" draggable=\"false\"/>\r\n                        {connecters}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import Pumped from './pumped';\r\n\r\nexport default Pumped;","import React, { Component } from 'react';\r\nimport { workerHandler, positionWatcher } from '../../services'\r\n\r\nimport './pumped.css';\r\n\r\nexport default class Pumped extends Component{\r\n\r\n    worker = new SharedWorker('./services/worker.js');\r\n\r\n    messageHandler = new workerHandler(this.worker, {\r\n        'pumped:close': (name) => {\r\n            if(window.name === name) window.close();\r\n        },\r\n        'pumped:closeAll': () => {\r\n            window.close();\r\n        },\r\n        'pumped:plugged': (data) => {\r\n            let { target, side } = data;\r\n            if(window.name === target) this.onChangePlug(true, side);\r\n        },\r\n        'pumped:unplugged': (name) => {\r\n            if(window.name === name) this.onChangePlug(false);\r\n        },\r\n        'pump:down': ({delta, ratio}) => {\r\n            if(this.state.plagged) this.onPumpDown(delta, ratio);\r\n        }\r\n    });\r\n\r\n    state = {\r\n        lastTitle: '',\r\n        position: {},\r\n        plagged: false,\r\n        side: '',\r\n        delta: 0,\r\n        ratio: 1,\r\n        runResize: false,\r\n    }\r\n\r\n    runResize = (need) => {\r\n        requestAnimationFrame(() => this.smoothResize(need));\r\n    }\r\n\r\n    smoothResize = (need) => {\r\n        let { delta, runResize } = this.state;\r\n        if(runResize && !need) return;\r\n\r\n        console.log('smoothResize');\r\n        \r\n\r\n        let step = 2;\r\n        let move = -step / 2;\r\n\r\n        delta = delta - step;\r\n\r\n        window.resizeBy(step, step);\r\n            window.moveBy(move, move);\r\n\r\n        if(delta > 0) {\r\n            runResize = true;\r\n            this.runResize(true);\r\n        } else {\r\n            delta = 0;\r\n            runResize = false;\r\n        }\r\n\r\n        this.setState({\r\n            delta,\r\n            runResize\r\n        });\r\n    }\r\n\r\n    onPumpDown(delta, ratio = 1) {        \r\n        this.setState(state => {\r\n            this.runResize();\r\n\r\n            return {\r\n                delta: state.delta + ( delta / ratio),\r\n                ratio,\r\n            }\r\n        })\r\n    }\r\n\r\n    onChangePlug(value, side = '') {\r\n        this.setState({\r\n            plagged: value,\r\n            side\r\n        });\r\n    }\r\n\r\n    onPosition(position) {\r\n        this.messageHandler.message('position:update', {target: window.name, position});\r\n        this.setState({\r\n            position\r\n        })\r\n    }\r\n\r\n    onClose = () => {\r\n        this.messageHandler.message('pumped:disconnected', window.name);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let lastTitle = document.title;\r\n        document.title = 'Шарик';\r\n\r\n        window.addEventListener('beforeunload', this.onClose);\r\n\r\n        this.messageHandler.message('pumped:connected', window.name);\r\n\r\n        this.posWatcher = new positionWatcher(pos => this.onPosition(pos));\r\n\r\n        this.setState({\r\n            lastTitle\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.title = this.state.lastTitle;\r\n\r\n        this.posWatcher && this.posWatcher.stop();\r\n    }\r\n\r\n    render() {\r\n        const { plagged } = this.state;\r\n        let color = plagged ? '#e91e63' : '#576d7e';\r\n\r\n        return (\r\n            <div className=\"Pumped\">\r\n                <svg className=\"baloon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"223\" height=\"300\" viewBox=\"0 0 222 300\" version=\"1.1\">\r\n                    <path fill={color} transform=\"matrix(0.02344759,0,0,-0.02344759,-0.03472868,300.11723)\" d=\"M 4430,12789 C 3509,12730 2661,12419 1950,11881 883,11074 192,9797 36,8345 -33,7704 2,6967 136,6240 328,5201 760,4156 1358,3285 1894,2504 2583,1846 3277,1451 c 140,-79 424,-214 558,-264 215,-80 439,-136 648,-162 60,-7 111,-16 115,-19 8,-9 -15,-237 -34,-326 -35,-167 -134,-411 -198,-487 -33,-40 -33,-73 2,-105 59,-57 173,-82 372,-83 213,0 331,25 393,83 36,34 34,62 -7,116 -114,150 -225,522 -226,758 0,54 -15,47 150,68 889,116 1919,814 2751,1865 480,607 892,1332 1182,2085 466,1210 624,2521 441,3659 -214,1337 -881,2491 -1874,3242 -876,663 -1971,982 -3120,908 z\"/>\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n}","import App from './app'\r\n\r\nexport default App","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Main from '../../pages/main';\nimport Pumping from '../../pages/pumping';\nimport Pumped from '../../pages/pumped';\n\nimport './app.css';\n\nconst App = () => {\n    const { REACT_APP_DEPLOY_FOLDER } = process.env;\n    \n    return (\n        <div className=\"App\" >\n            <Router basename={REACT_APP_DEPLOY_FOLDER}>\n                <Route path={`/`} component={ Main } exact/>\n\n                <Route path={`/pumping`} component={ Pumping }/>\n\n                <Route path={`/pumped`} component={ Pumped }/>\n            </Router>\n        </div>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\n\nReactDOM.render( <App / > , document.getElementById('root'));"],"sourceRoot":""}